###############################################################################
##########################          CONFIG          ###########################
###############################################################################
configfile: "/Users/natmurad/Documents/rnaseqExNeuronsLong/config.yaml"

###############################################################################
########################          LIBRARIES          ##########################
###############################################################################
import io 
import os
import shutil
import pandas as pd
import pathlib
import time
from snakemake.exceptions import print_exception, WorkflowError

start = time.time()

###############################################################################
######################          SET VARIABLES          ########################
###############################################################################
THREADS = config["threads"]

STEP_QC = config["step_qC"] # quality control
STEP_MAP = config["step_map"] # indexing and mapping
STEP_COUNTS = config["step_counts"] # quantify counts

SAMPLES = config["samples"].split() # sample files
LANE = config["lane"]
NUM = config["reads"].split()
FQ = config["fq"]

ADAPTERS = config["adapters"] # adapters sequences
REF_GENOME = config["ref_genome"]
GTF_FILE = config["gtf_file"]
PREF = config["prefix_ref"]

INPUTDIR = config["raw_data_dir"] #  /home/dataset/raw_data - fastq reads
DIR = config["base_dir"] # /home/user/
TRIMMEDDIR = config["trimmed_dir"] # /home/dataset/trimmed
STARINDEXDIR = config['genomeindexdir'] # /home/dataset/reference
RSEMPREPREF = config['rsemprepref'] # # /home/dataset/reference

OUT_STEP_QC = os.path.join(DIR, STEP_QC) # /home/dataset/qC
OUT_STEP_MAP = os.path.join(DIR, STEP_MAP) # /home/dataset/map
OUT_STEP_COUNTS = os.path.join(DIR, STEP_COUNTS) # /home/dataset/counts

###############################################################################
#########################          RULE ALL          ##########################
###############################################################################
rule all:
    input:
#     fastqc output before trimming
        fastq_html = expand("{out_dir_name}/fastqcRaw/{sample}{lane}_fastqc.html", out_dir_name=OUT_STEP_QC, sample=SAMPLES, lane=LANE),
        fastq_zip = expand("{out_dir_name}/fastqcRaw/{sample}{lane}_fastqc.zip", out_dir_name=OUT_STEP_QC, sample=SAMPLES, lane=LANE),
    # fastqc output after trimming
        trimmed = expand("{trim_dir}{sample}{lane}_trimmed.fq.gz", trim_dir = TRIMMEDDIR, sample=SAMPLES, lane=LANE),
        html_trim = expand("{out_dir_name}/fastqcTrim/{sample}{lane}_trimmed_fastqc.html", out_dir_name=OUT_STEP_QC, sample=SAMPLES, lane=LANE),
        zip_trim = expand("{out_dir_name}/fastqcTrim/{sample}{lane}_trimmed_fastqc.zip", out_dir_name=OUT_STEP_QC, sample=SAMPLES, lane=LANE),
   # merged reports before trimming
        raw_html = OUT_STEP_QC + "/fastqcRaw/multiqc_report.html",
    # merged reports after trimming
        trim_html = OUT_STEP_QC + "/fastqcTrim/multiqc_report.html",
    # reference for alignments
       # rsemref = RSEMPREPREF + PREF + ".seq",
    # star align
     #   reads_map = expand("{out_dir}/{sample}{lane}Aligned.sortedByCoord.out.bam", out_dir = OUT_STEP_MAP, sample=SAMPLES, lane=LANE),
    # rsem
    #    counts = expand("{out_dir}/{sample}{lane}.genes.results", out_dir = OUT_STEP_COUNTS,  sample=SAMPLES, lane=LANE),



###############################################################################
#################          QUALITY REPORT RAW DATA          ###################
###############################################################################
include:	"rules/SE/fastqcRAW.smk"

###############################################################################
#########################          TRIMMING          ##########################
###############################################################################
include:	"rules/SE/trimmomatic.smk"

###############################################################################
###############          QUALITY REPORT TRIMMED DATA          #################
###############################################################################
include:	"rules/SE/fastqcTRIM.smk"

###############################################################################
######################          MERGE REPORTS          ########################
###############################################################################
include:	"rules/SE/multiqc.smk"

###############################################################################
###################        RSEM PREPARE REFERENCE        ######################
###############################################################################
#include:	"rules/SE/rsemref.smk"

###############################################################################
######################          STAR MAPPING           ########################
###############################################################################
#include:	"rules/SE/starmap.smk"

###############################################################################
######################          RSEM COUNTS            ########################
###############################################################################
# include:	"rules/SE/rsemcounts.smk"

onsuccess:
    print("\n\n#######################################################\n")
    print("########------ PREPROCESSING FINISHED! ------##########\n")
    print("#######################################################\n")
    print("\n\nRunning time in minutes: %s\n" % round((time.time() - start)/60,1))
    shutil.rmtree(".snakemake")